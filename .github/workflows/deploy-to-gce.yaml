# Copyright 2020 Google, LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build and Deploy to Google Compute Engine

on:
  push:
    branches:
      - main
      - dockerize_refactoring # TODO: take out once workflow is working

env:
  PROJECT_NAME: ${{ secrets.GCE_PROJECT_NAME }}
  PROJECT_ID: ${{ secrets.GCE_PROJECT_ID }}
  GCE_INSTANCE: ubcdsc-docker-vm-1
  GCE_INSTANCE_ZONE: us-west1-b

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCE_SA_KEY }}'
      # ALTERNATIVE: inject secrets to docker env variables
      # - id: 'secrets'
      #   uses: 'google-github-actions/get-secretmanager-secrets@v0'
      #   with:
      #     secrets: |-
      #       CLIENT_ID:projects/802374845507/secrets/CLIENT_ID
      #       DISCORD_TOKEN:projects/802374845507/secrets/DISCORD_TOKEN
      #       GUILD_ID:projects/802374845507/secrets/GUILD_ID

      # Setup gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker
      # Build the Docker image
      - name: Build
        # ALTERNATIVE: inject secrets to docker env variables
        # env:
        #   ENV_CLIENT_ID: '${{ steps.secrets.outputs.CLIENT_ID }}'
        #   ENV_DISCORD_TOKEN: '${{ steps.secrets.outputs.DISCORD_TOKEN }}'
        #   ENV_GUILD_ID: '${{ steps.secrets.outputs.GUILD_ID }}'
        run: |-
          docker build --tag "gcr.io/$PROJECT_NAME/$GCE_INSTANCE-image:$GITHUB_SHA" .
        # ALTERNATIVE: inject secrets to docker env variables
        # docker build \
        #   --build-arg ARG_ENV_CLIENT_ID=$ENV_CLIENT_ID \
        #   --build-arg ARG_ENV_DISCORD_TOKEN=$ENV_DISCORD_TOKEN \
        #   --build-arg ARG_ENV_GUILD_ID=$ENV_GUILD_ID \
        #   --tag "gcr.io/$PROJECT_NAME/$GCE_INSTANCE-image:$GITHUB_SHA" .
        # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_NAME/$GCE_INSTANCE-image:$GITHUB_SHA"
      # Prune unused images to avoid failing due to full boot disk
      - name: Update startup script to prune
        run: |-
          gcloud compute instances add-metadata $GCE_INSTANCE \
            --zone "$GCE_INSTANCE_ZONE" \
            --metadata=startup-script="#! /bin/bash
              docker image prune -af"
      - name: Deploy
        run: |-
          gcloud compute instances update-container "$GCE_INSTANCE" \
            --zone "$GCE_INSTANCE_ZONE" \
            --container-image "gcr.io/$PROJECT_NAME/$GCE_INSTANCE-image:$GITHUB_SHA"
      # Purge old images from GCR (avoid exceeding free-tier)
      - name: Purge GCR images
        run: |-
          gcloud container images list-tags gcr.io/$PROJECT_NAME/$GCE_INSTANCE-image \
            --format="get(digest)" --filter="NOT tags=$GITHUB_SHA" | \
            awk -v image_path="gcr.io/$PROJECT_NAME/$GCE_INSTANCE-image@" '{print image_path $1}' | \
            xargs -r gcloud container images delete --force-delete-tags --quiet